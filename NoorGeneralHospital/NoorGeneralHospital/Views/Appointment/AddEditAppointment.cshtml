@model NoorGeneralHospital.Models.InputDTO.AppointmentInput

<div class="row">
    <div class="col-lg-8 offset-lg-2">
        <h4 class="page-title">Add Appointment</h4>
    </div>
</div>
<div class="row">
    <div class="col-lg-8 offset-lg-2">
        @using (Html.BeginForm("SaveAppointment", "Appointment", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Select Speciality</label>
                        @Html.DropDownListFor(x => Model.SpecialityId, new SelectList(Model.GetSpeciality(), "Value", "Text"), htmlAttributes: new { @class = "form-control", @onchange = "PopulateDoctorsList()" })
                        @Html.ValidationMessageFor(x => x.SpecialityId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Select Doctor</label>
                        @Html.DropDownListFor(x => Model.DoctorId, Enumerable.Empty<SelectListItem>(), htmlAttributes: new { @class = "form-control", @disabled = "disabled" })
                        @Html.ValidationMessageFor(x => x.DoctorId, "", new { @class = "text-danger" })

                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Date</label>
                        <div class="cal-icon">
                            @Html.TextBoxFor(s => s.AppointmentDate, new { @class = "form-control datetimepicker", @placeholder = "Select Date" })
                            @Html.ValidationMessageFor(s => s.AppointmentDate, null, new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Time</label>
                        <div class="time-icon">
                            @Html.TextBoxFor(s => s.AppointmentTime, new { @class = "form-control timepicker", @placeholder = "Select Time" })
                            @Html.ValidationMessageFor(s => s.AppointmentDate, null, new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label>Message</label>
                @Html.TextAreaFor(s => s.Description, new { @class = "form-control", @cols = "30", @rows = "4" })
                @Html.ValidationMessageFor(x => x.Description, "", new { @class = "text-danger" })
            </div>

            <div class="m-t-20 text-center">
                <button class="btn btn-primary submit-btn">Create Appointment</button>
            </div>}
    </div>
</div>


<script src="~/Content/assets/js/jquery.validate.min.js"></script>
<script src="~/Content/assets/js/jquery.validate.unobtrusive.min.js"></script>
<script>
    $(document).ready(function () {
        //For Date Picker
        $('#AppointmentDate').datetimepicker({
            format: 'DD-MM-YYYY',
        });

        $('.timepicker').datetimepicker({
            format: 'LT'
        });

        //Begin Form Insert
        $('form').submit(function (e) {
            e.preventDefault();
            var isValid = $(this).validate().form();
            if (!isValid) return false;
            else {
                $.ajax({
                    url: '/Appointment/SaveAppointment',
                    data: $(this).serialize(),
                    type: 'POST',
                    beforeSend: function () {
                    },
                    complete: function () {
                    },
                    success: function (res) {
                        if (res.Code == "1") {
                            toastr.success(res.Message, 'success!');
                            _AppointmentDetail();
                        }
                        else if (res.Code == "2") {
                            toastr.warning(res.Message, 'warning!');
                        }
                        else {
                            toastr.error(res.Message, 'error!');
                        }
                    },
                    error: function (jqXHR, error, errorThrown) {
                        toastr.error('Sorry Try again', 'error!');
                    },
                });
            }
        });

    });

    function PopulateDoctorsList() {
        var SpecialityId = parseInt($('#SpecialityId').val());
        debugger
        if (SpecialityId == null || SpecialityId == 0) {
            toastr.info("Please Select Speciality!", "info");
        }
        else {
            $.ajax({
                type: "POST",
                url: "/Appointment/PopulateDoctorsListBySpecialityId",
                data: { SpecialityId: SpecialityId },
                success: function (response) {
                    console.log(response);
                    if (response.length == 0) {
                        toastr.info("there is no record found of this type!", "info");
                    }
                    $("#DoctorId").empty().append('<option value="" selected="selected">Select an Option</option>');
                    for (var i in response) {
                        $("#DoctorId").append('<option value="' + response[i].Value + '">' + response[i].Text + '</option>');
                    }
                    $("#DoctorId").attr("disabled", false);
                },
                complete: function () {
                },
                error: function (error) {
                    toastr.info("there is no record found of this type!", "info");
                }
            });
        }
    }
</script>